pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = 'aws-credentials' // Jenkins AWS credentials ID
        HELM_RELEASE_NAME = 'evershop-app'     // Helm release name for the app
        HELM_CHART_PATH = './evershop-app-helm-chart'     // Path to the Helm chart for the app
        POSTGRES_HELM_RELEASE = 'postgres'    // Helm release name for Postgres
        POSTGRES_CHART_PATH = './postgres-helm-chart' // Path to Postgres Helm chart
        K8S_NAMESPACE = 'evershop'            // Kubernetes namespace
    }

    triggers {
        // Trigger pipeline only for pull requests to main branch - testing
        githubPush() // Trigger for GitHub push events
        // Alternatively, use PR trigger based on specific events
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository for PR to '*/main' branch
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'evershop-eks-repo-github-token', url: 'https://github.com/shubh-rgb/evershop-eks-dev.git']])
            }
        }

        stage('Deploy to EKS') {
            steps {
                // Use AWS credentials from Jenkins to configure AWS CLI
                withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                    // Set up AWS CLI and configure the KUBECONFIG to access EKS
                    sh '''
                    aws eks --region ap-south-1 update-kubeconfig --name evershop-eks-cluster
                    whoami
                    export KUBECONFIG=$HOME/.kube/config
                    kubectl get pods -n evershop
                    kubectl get svc -n evershop
                    '''
                }

                // Deploy to Kubernetes with rolling update
                script {
                    try {
                        // Update the deployment image and perform a rolling update using Helm for the app and Postgres
                        sh '''
                        helm upgrade --install $HELM_RELEASE_NAME $HELM_CHART_PATH --namespace $K8S_NAMESPACE
                        helm upgrade --install $POSTGRES_HELM_RELEASE $POSTGRES_CHART_PATH --namespace $K8S_NAMESPACE
                        '''
                    } catch (Exception e) {
                        // Rollback if deployment fails
                        echo 'Deployment failed, rolling back...'
                        sh '''
                        helm rollback $HELM_RELEASE_NAME --namespace $K8S_NAMESPACE
                        helm rollback $POSTGRES_HELM_RELEASE --namespace $K8S_NAMESPACE
                        '''
                        throw e  // Re-throw the exception to mark the build as failed
                    }
                }
            }
        }
    }

    post {
        always {
            // Cleanup workspace
            cleanWs()
        }
        failure {
            // Notify on failure
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}