pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials' // Jenkins Docker Hub credentials ID
        AWS_CREDENTIALS_ID = 'aws-credentials' // Jenkins AWS credentials ID
        DOCKER_IMAGE = 'shubh301/my-evershop-image:v1' // Docker Hub image
        KUBECONFIG = '/home/jenkins/.kube/config' // Path to kubeconfig file
        K8S_NAMESPACE = 'evershop' // Kubernetes namespace
        DEPLOYMENT_NAME = 'evershop-deployment:v1' // Kubernetes deployment name
    }

    stages {
        stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/development']], extensions: [], userRemoteConfigs: [[credentialsId: 'evershop-eks-repo-github-token', url: 'https://github.com/shubh-rgb/evershop-eks-dev.git']])
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build Docker image from source and push it to Docker Hub
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker build -t $DOCKER_IMAGE .
                    docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Test Application') {
            steps {
                // Run application tests
                echo 'Running application tests...'
                sh 'npm test || echo "No test framework setup yet."'
            }
        }

        stage('Scan Docker Image') {
            steps {
                // Scan Docker image with Trivy
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'trivy image $DOCKER_IMAGE'
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                // Use AWS credentials from Jenkins to configure AWS CLI
                withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                    // Set up AWS CLI and configure the KUBECONFIG to access EKS
                    sh '''
                    aws eks --region ap-south-1 update-kubeconfig --name my-eks-cluster
                    export KUBECONFIG=$HOME/.kube/config
                    '''
                }

                // Deploy to Kubernetes with rolling update
                script {
                    try {
                        // Update the deployment image and perform a rolling update
                        sh '''
                        kubectl set image deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE app-container=$DOCKER_IMAGE --record
                        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE
                        '''
                    } catch (Exception e) {
                        // Rollback if deployment fails
                        echo 'Deployment failed, rolling back...'
                        sh '''
                        kubectl rollout undo deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE
                        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE
                        '''
                        throw e  // Re-throw the exception to mark the build as failed
                    }
                }
            }
        }
    }

    post {
        always {
            // Cleanup workspace
            cleanWs()
        }
        failure {
            // Notify on failure
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
